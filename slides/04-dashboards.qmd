---
title: "Dashboards"
subtitle: "CIPPCD 2025: Dynamic Reproducible<br>Documents for Public Policy with Quarto"
author: "Julia Silge"
institute: "Posit PBC"
footer: "<https://juliasilge.github.io/cippcd-2025/>"
highlight-style: atom-one
format:
  revealjs: 
    theme: [default, custom.scss]
    transition: fade
    preview-links: auto
    width: 1280
    height: 720
    title-slide-attributes: 
      data-background-gradient: "linear-gradient(-20deg, #e9defa 0%, #fbfcdb 100%)"
---

# Hello!

<center>

<img src="https://github.com/juliasilge.png" style="border-radius: 50%;" width="300px"/>

[{{< fa brands github >}} \@juliasilge](https://github.com/juliasilge)

[{{< fa brands bluesky >}} \@juliasilge.com](https://bsky.app/profile/juliasilge.com)

[{{< fa brands youtube >}} youtube.com/juliasilge](https://www.youtube.com/juliasilge)

[{{< fa link >}} juliasilge.com](https://juliasilge.com/)

</center>

# Anatomy of a Quarto dashboard {background-gradient="linear-gradient(-20deg, #e9defa 0%, #fbfcdb 100%)"}

## Components

1.  Metadata: YAML

2.  Text: Markdown, likely placed in cards

3.  Code: Executed via `jupyter` (or `knitr`), automatically placed in cards

. . .

**Weave it all together**, and you have a beautiful, functional dashboard!

##  {.no-line background-image="../images/dashing-through-snow.png" background-size="contain"}

::: footer
:::

##  {.no-line background-image="../images/customer-churn.png" background-size="contain"}

::: footer
:::

##  {.no-line background-image="../images/mynorfolk.png" background-size="contain"}

::: footer
:::

##  {.no-line background-image="../images/earthquakes.png" background-size="contain"}

::: footer
:::

##  {.no-line background-image="../images/model-card.png" background-size="contain"}

::: footer
:::

##  {.no-line background-image="../images/shiny-penguins.png" background-size="contain"}

::: footer
:::

##  {.no-line background-image="../images/gapminder.png" background-size="contain"}

::: footer
:::

## Our turn

::: {.callout-note icon=false}

## Activity

Let's review the components of `hello-penguins-dashboard.qmd`.
:::

## Notebook ➝ Dashboard

```` {.markdown filename="hello-penguins-dashboard.qmd" style="overflow-y: hidden" code-line-numbers="|3"}
---
title: Hello, penguins!
format: dashboard
---

# notebook content goes here...
````

## Dashboard Components

1)  **Navigation Bar and Pages** --- Icon, title, and author along with links to sub-pages (if more than one page is defined).

2)  **Sidebars, Rows & Columns, and Tabsets** --- Rows and columns using markdown heading (with optional attributes to control height, width, etc.). Sidebars for interactive inputs. Tabsets to further divide content.

3)  **Cards (Plots, Tables, Value Boxes, Content)** --- Cards are containers for cell outputs and free form markdown text. The content of cards typically maps to *cells* in your notebook or source document.

::: fragment
*All of these components can be authored and customized within notebook UI or plain text qmd.*
:::

## Navigation Bar and Pages

![](../images/navigation-toolbar.png)

::: {style="margin-top: 0.7em;"}
``` {.python .pymd}
--- 
title: Hello, Penguins!
format: 
  dashboard:
    logo: images/penguins-logo.png
    nav-buttons:
      - icon: github
        href: https://github.com/mine-cetinkaya-rundel/quarto-scipy24-exercises
---

# Data

# Analysis
```
:::

## Sidebars: Page Level {.component-slide}

::: columns
::: column
```` {.python .pymd style="margin-top: 45px;"}
---
title: "Sidebar"
format: dashboard
---
    
# Page 1

## {.sidebar}

```{{python}}
```

## Column 

```{{python}}
```

```{{python}}
```
````
:::

::: {.column .fragment}
![](../images/chart-input-sidebar.png)
:::
:::

## Sidebars: Global {.compontent-slide}

::: columns
::: column
```` {.python .pymd style="margin-top: 45px;"}
---
title: "Global Sidebar"
format: dashboard
---
    
# {.sidebar}

Sidebar content (e.g. inputs)

# Plot

```{{python}}
```

# Data

```{{python}}
```
````
:::

::: {.column .fragment}
![](../images/global-sidebar.png){width="80%"}
:::
:::

## Layout: Rows {.component-slide}

::: columns
::: {.column style="margin-top: 65px;"}
```` {.python .pymd}
---
title: "Focal (Top)"
format: dashboard
---
    
## Row {height=70%}

```{{python}}
```

## Row {height=30%}

```{{python}}
```

```{{python}}
```
````
:::

::: {.column .fragment}
![](../images/chart-focal-top.png){width="90%"}
:::
:::

##  {.no-line background-image="../images/customer-churn.png" background-size="contain"}

::: footer
:::

## Layout: Columns {.component-slide}

::: columns
::: {.column style="margin-top: 40px;"}
```` {.python .pymd}
---
title: "Focal (Top)"
format: 
  dashboard:
    orientation: columns
---
    
## Column {width=60%}

```{{python}}
```

## Column {width=40%}

```{{python}}
```

```{{python}}
```
````
:::

::: {.column .fragment}
![](../images/chart-focal-left.png)
:::
:::

##  {.no-line background-image="../images/housing-market.png" background-size="contain"}

::: footer
:::

## Tabsets {.component-slide}

::: columns
::: {.column style="margin-top: 45px;"}
```` {.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
## Row

```{{python}}
```

## Row {.tabset}

```{{python}}
#| title: Chart 2
```

```{{python}}
#| title: Chart 3
```
````
:::

::: {.column .fragment}
![](../images/chart-tabset-row.png){width="87%"}
:::
:::

##  {.no-line background-image="../images/mynorfolk.png" background-size="contain"}

::: footer
:::

## Plots {.component-slide}

::: columns
::: {.column .fragment .smaller}
[plotly](https://plotly.com/python/)

```` python
```{{python}}
#| title: GDP and Life Expectancy
import plotly.express as px
df = px.data.gapminder()
px.scatter(
  df, x="gdpPercap", y="lifeExp", 
  animation_frame="year", animation_group="country",
  size="pop", color="continent", hover_name="country", 
  facet_col="continent", log_x=True, size_max=45, 
  range_x=[100,100000], range_y=[25,90]
)
```
````
:::

::: {.column .fragment}
![](../images/plotly-interactive.png){width="85%"}
:::
:::

## Plots {.component-slide}

::: columns
::: {.column .fragment .smaller}
[ipyleaflet](https://ipyleaflet.readthedocs.io)

```` python
```{{python}}
#| title: "World Map"
#| padding: 0px
from ipyleaflet import Map, basemaps, basemap_to_tiles
Map(basemap=basemap_to_tiles(basemaps.OpenStreetMap.Mapnik),
    center=(48.204793, 350.121558), zoom=2)
```
````
:::

::: {.column .fragment}
![](../images/leaflet-card-title-padding.png){width="85%"}
:::
:::

## Tables {#component-tables .component-slide}

::: columns
::: {.column .fragment}
[tabulate](https://pypi.org/project/tabulate/)

```` python
```{{python}}
from tabulate import tabulate
from IPython.display import Markdown
Markdown(tabulate(penguins, showindex=False)}
```
````
:::

::: {.column .fragment}
![](../images/tabulate.png)
:::
:::

::: columns
::: {.column .fragment}
[itables](https://pypi.org/project/itables/)

```` python
```{{python}}
from itables import show
show(penguins)
```
````
:::

::: {.column .fragment}
![](../images/itables-scrolling.png)
:::
:::

```{=html}
<style type="text/css">
.component-slide .column > p {
  margin-top: 0;
}
.component-slide .column > p > img {
  margin-top: -8px;
}
#component-tables .column > div.sourceCode {
  margin-top: 30px;
}
</style>
```
## Value Boxes {#value-box-component .component-slide}

::: columns
::: {.column width="45%"}
```` {.python .pymd style="margin-top: 45px;" code-line-numbers="|3-9|14-17|"}
## Row

```{{python}}
#| component: valuebox
#| title: "Current Price"
dict(icon = "currency-dollar",
     color = "secondary",
     value = get_price(data))
```

```{{python}}
#| component: valuebox
#| title: "Change"
change = get_change(data)
dict(value = change['amount'],
     icon = change['icon'],
     color = change['color']) 
```
````
:::

::: {.column .fragment width="55%"}
![](../images/value-box-app.png){.border width="80%"}
:::
:::

```{=html}
<style type="text/css">
#value-box-component pre.sourceCode code {
  max-height: 750px;
}
</style>
```
## Text Content {.component-slide}

::: columns
::: {.column width="55%"}
```` {.python .pymd code-line-numbers="|17-22|"}
## Column

```{{python}}
#| title: Population
px.area(df, x="year", y="pop", 
        color="continent", 
        line_group="country")
```

```{{python}}
#| title: Life Expectancy
px.line(df, x="year", y="lifeExp", 
        color="continent", 
        line_group="country")
```

::: {.card}
Gapminder combines data from multiple sources
into unique coherent time-series that can’t be
found elsewhere. Learn more about the Gampminder
dataset at <https://www.gapminder.org/data/>.
:::
````
:::

::: {.column .fragment width="45%"}
![](../images/text-content-column.png){width="100%"}
:::
:::

## Expanding Cards

Cards provide an **Expand** button which appears at bottom right on hover:

![](../images/expanding-cards.png)

## Dashboard Deployment

Dashboards are typically just static HTML pages so can be deployed to any web server or web host.

. . .

| Approach | When? |
|------:|:-----|
|   Static  |  Rendered a single time (e.g. when underlying data won’t ever change)  |
|  Scheduled  |  Rendered on a schedule (e.g. via `cron` job) to accommodate changing data  |
|    Parameterized  |   Fully interactive dashboard using Shiny (requires a server for deployment)  |
: {tbl-colwidths="[25,75]"}


## Parameterized Dashboards

::: columns
::: column
![](../images/stock-explorer-dashboard.png)
:::

::: column
Add a parameters tag to the first cell (based on [papermill](https://papermill.readthedocs.io/en/latest/usage-parameterize.html)) :

```` python
```{{python}}
#| tags: [parameters]
ticker = "BA"
```
````

Use the `-P` command line option to vary the parameter:

``` bash
quarto render dashboard.qmd -P ticker:GOOG
```
:::
:::

## Interactive Dashboards

<https://quarto.org/docs/dashboards/interactivity/shiny-python/>

::: columns
::: {.column width="40%"}
-   For interactive exploration, some dashboards can benefit from a live Python backend

-   To do this with Quarto Dashboards, add interactive [Shiny](https://shiny.posit.co/py/) components

-   Deploy with or without a server!
:::

::: {.column width="60%"}
![](../images/shiny-homepage.png){.border}
:::
:::

##  {.no-line background-image="../images/shiny-penguins.png" background-size="contain"}

## Deployment of Interactive Dashboards

### Server
#### Cloud

[shinyapps.io](https://shiny.posit.co/py/docs/deploy.html#deploy-to-shinyapps.io-cloud-hosting), [HuggingFace Spaces](https://quarto.org/docs/publishing/hugging-face.html), or [roll your own](https://shiny.posit.co/py/docs/deploy.html#other-hosting-options)

#### On-Prem

[Shiny Server](https://shiny.posit.co/py/docs/deploy.html#deploy-to-shiny-server-open-source) (open source, [Posit Connect](https://shiny.posit.co/py/docs/deploy.html#deploy-to-posit-connect-commercial) (commercial), or [roll your own](https://shiny.posit.co/py/docs/deploy.html#other-hosting-options)

<br>

### Serverless

Using [Pyodide](https://pyodide.org/) such as with [this example](https://wch.github.io/retirement-simulation-dashboard/)

# Wrap up {background-gradient="linear-gradient(-20deg, #e9defa 0%, #fbfcdb 100%)"}

## Learn more

[quarto.org/docs/dashboards](https://quarto.org/docs/dashboards/>)

```{=html}
<iframe src="https://quarto.org/docs/dashboards" width="100%" height="500" style="border:2px solid #123233;" title="Quarto Dashboards"></iframe>
```

# Thanks!

<center>

<img src="https://github.com/juliasilge.png" style="border-radius: 50%;" width="300px"/>

[{{< fa brands github >}} \@juliasilge](https://github.com/juliasilge)

[{{< fa brands bluesky >}} \@juliasilge.com](https://bsky.app/profile/juliasilge.com)

[{{< fa brands youtube >}} youtube.com/juliasilge](https://www.youtube.com/juliasilge)

[{{< fa link >}} juliasilge.com](https://juliasilge.com/)

</center>

::: footer
Slides created with [Quarto](https://quarto.org/)
:::
